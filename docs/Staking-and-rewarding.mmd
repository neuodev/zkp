Mind Map generated by NB MindMap plugin
> __version__=`1.1`,showJumps=`true`
---

# Staking for Governance & Rewards

## Governance Staking
> collapsed=`true`


### Gives voting power
> collapsed=`true`


#### on voting for governance proposals
> collapsed=`true`


##### with on\-chain or off\-chain votings

### $ZKPs staked
> collapsed=`true`


#### on the mainnet
> collapsed=`true`


##### $ZKPs never leave the mainnet
> collapsed=`true`


###### when "unstake"\`d, $ZKPs returned to a user on the mainnet

##### kept separately from the Staking Reward Pool
> collapsed=`true`


###### which may get to Polygon
> collapsed=`true`


####### if the Journey happens

#### user decides which of two stakes types to choose
> collapsed=`true`


##### the Traditional Stake

##### the Experimental Stake

### Time limitations
> collapsed=`true`


#### "stake"\`s
> collapsed=`true`


##### accepted till the Journey Approval Deadline
> collapsed=`true`


###### may be extended by a governance proposal

#### "unstake"\`s
> collapsed=`true`


##### from the Traditional Stake
> collapsed=`true`


###### allowed at any time after 7 days on stake

##### from the Experimental Stake
> collapsed=`true`


###### allowed no sooner than on the Journey Approval Deadline

##### may be extended for voters via on\-chain\-voting contract
> collapsed=`true`


###### not implemented, but interface left to let plug it in later

## Staking Reward Pool
> collapsed=`true`


### Pool of $ZKPs vested for rewarding stakers

### $ZKP vested at a steady rate over time until the Journey Approval Deadline

### $ZKPs kept on the mainnet
> collapsed=`true`


#### unless and in the amount sent to the Journey
> collapsed=`true`


##### if the Journey happens and a user has not opted for the Emergency Exit

## RPS
> collapsed=`true`


### RPS means "staking Reward Pool Share"

### represents shares in the Staking Reward Pool
> collapsed=`true`


#### $ZKPs vested to the Staking Reward Pool within any period are shared equally between all RPSs issued \(but not redeemed\) before that period

### issued when a user "stake"\`s $ZKPs to the Governance Staking
> collapsed=`true`


#### different issue rates for "Traditional" vs "Experimental" stakes

### non\-transferable

### redeemable
> collapsed=`true`


####  when a user "unstake"\`s $ZKPs from the Governance Staking

##### for "Normal Exit"

##### for "Emergency Exit"

#### into $ZKPs from the Staking Reward Pool AND, if the Journey happens and a user opts for it, into extra PRPs

#### 3 ways to redeem
> collapsed=`true`


##### for the Traditional Stake
> collapsed=`true`


###### see "Normal Exit"

##### for the Experimental Stake
> collapsed=`true`


###### see "Journey"
> collapsed=`true`


####### if the Journey has been approved AND a user has not opted for the Emergency Exit

###### see "Emergency Exit"
> collapsed=`true`


####### if the Journey has not been approved OR a user has opted for the Emergency Exit

## two kind of Stakes
> collapsed=`true`


### Traditional Stake
> collapsed=`true`


#### 1\.00 RPS issued for 1\.00 $ZKP put in the Governance Staking

#### user may redeem RPSs at any time \(after 7 days on stake\)
> collapsed=`true`


##### referred to as the "Normal Exit"

##### redeemed in $ZKPs on the mainnet

##### together with "unstake" from the Governance Staking

##### in entire amount attributable to "unstake"\`d $ZKPs

#### built into smart contacts from the very beginning

#### user must "unstake" from the Governance Staking to activate the redumption

### Experimental Stake
> collapsed=`true`


#### 1\.05 RPS issued for 1\.00 $ZKP put in the Governance Staking
> collapsed=`true`


##### i\.e\. 5% extra RPS

##### redeemable via the Journey or the Emergency Exit or
> collapsed=`true`


###### user may opt from

#### user gets extra PRP reward
> collapsed=`true`


##### redeemable via the Journey only
> collapsed=`true`


###### if the Journey happens

#### redeemable
> collapsed=`true`


##### at the earliest of the Journey Cancellation Deadline or the Journey Approval Deadline

##### two redemption options
> collapsed=`true`


###### The "Journey"
> collapsed=`true`


####### redemption of reward $ZKPs and PRPs in Shielded Pools on Polygon

####### not yet implemented in smart contracts
> collapsed=`true`


######## except interfaces which allow implementation later

####### only happens if two conditions met
> collapsed=`true`


######## $ZKP holders approves the Journey
> collapsed=`true`


######### before the Journey Approval Deadline

######## at least one "experimental" staker has not opted for the Emergency Exit
> collapsed=`true`


######### by the Journey Cancellation Deadline

####### provided the "Journey" is approved
> collapsed=`true`


######## a user must send a "check\-in" tx on the mainnet
> collapsed=`true`


######### after the Journey Cancellation Deadline

######## a user do not need to "unstake" from the Governance Staking

###### The "Emergency exit"
> collapsed=`true`


####### redemption in the form of $ZKPs on the mainnet, without extra PRP
> collapsed=`true`


######## similar to the "Normal Exit"

####### built into smart contacts from the very beginning

####### in two cases
> collapsed=`true`


######## The Journey has not been approved by the Journey Approval Deadline
> collapsed=`true`


######### a user must "unstake" from the Governance Staking \(on\-chain\)
> collapsed=`true`


##########  after the Journey Approval Deadline

######## The Journey has been approved before the Journey Approval Deadline, but a opts for the Emergency Exit
> collapsed=`true`


######### user must "unstake" from the Governance Staking \(on\-chain\)
> collapsed=`true`


########## in between
> collapsed=`true`


########### the Journey Approval Date

########### the Journey Cancellation Deadline

####### to activate, a user must "unstake" from the Governance Staking

## Deadlines
> collapsed=`true`


### "Journey Approval Date"
> collapsed=`true`


#### the date when the governance proposal on the Journey get executed \(i\.e\. contracts implementing the Journey are deployed\)

#### may happen before the Journey Approval Deadline
> collapsed=`true`


##### on March 23rd at latest
> collapsed=`true`


###### if the Journey Approval Deadline unchanged

### "Journey Approval Deadline"
> collapsed=`true`


#### March 24th
> collapsed=`true`


##### may be changed by a governance proposal

#### If the Journey is not approved by that date, all "experimental" stakers may redeem RPSs via the Emergency Exit only\.

### Journey Cancellation Deadline
> collapsed=`true`


#### The Journey Approval Date plus Journey Cancellation Period
> collapsed=`true`


##### March 31st at latest
> collapsed=`true`


###### if the Journey Approval Deadline and the Journey Cancellation Period unchanged

##### After the Journey Approval Date till this date, "experimental" stakers may opt between the Journey and the Emergency Exit\.

#### If the Journey has been approved and an "experimental" staker has not opted for the Emergency Exit before this date, the staker has no other choices but the Journey\.

### Journey Cancellation Period
> collapsed=`true`


#### starts on the Journey Approval Date and ends on the Journey Cancellation Deadline

#### 7 days
> collapsed=`true`


##### may be updated by a governance proposal

## Smart Contracts

### RewardPool contract

#### It vests $ZKPs to the Stake Reward Pool

##### it calculates the amount of $ZKPs to send to the Stake contract

###### it stores End Of Vesting date and %% of the Vesting Pool

####### which may be updated by the governance proposal

##### it calls the VestingPools to sends $ZKPs to the Stake contract

###### IVestingPools\.releaseTo\(\.\.\)

##### it does not keep $ZKPs on its balance

### Staking contract

#### It implements Governance Staking

##### it keeps staked $ZKPs

##### it informs on voting power

##### it locks/unlocks staked $ZKPs

###### it keeps records on stakes

####### status, staker, amount, type, unlock date

###### it decides if a stake may be "unstake"\`d

####### when user calls "unstake"

##### it signals to the Stakes

######  on a new stake

###### on "unstake"\`d stake

###### signal sent via \`try\-catch\`

####### a stake must be returned no matter if

##### it stores the Journey Cancellation Deadline in its storage

###### provides it to Stakes

####### on a "view" call

### Stakes contract

#### It implements rewarding logic

##### it keeps $ZKPs of the Stake Reward Pool

##### it issues RPSs to a user

###### on signal from the Staking on a new stake

##### it redeem RPSs

###### on signal from Staking on "unstake"\`d stake

###### and sends $ZKPs from the Stake Reward Pool to a user

##### it keeps record on RPS balances

###### attributable for every stake

##### it calls the "journeyAgent"

###### to move relevant part of the Stake Reward Pool

###### to send messages on RPS balance of users

##### it keeps the Journey Cancellation Period on its storage

###### public "view"

## Future extensions
> collapsed=`true`


### StakePeriodExtender
> collapsed=`true`


#### role with the Staking contract
> collapsed=`true`


##### for future on\-chain voting contract

##### allows extend staking period
> collapsed=`true`


###### for voters

###### unsolved problem: locking after voting with delegated votes

### JourneyAgent
> collapsed=`true`


#### role with Stakes contract
> collapsed=`true`


##### transfers to Polygon $ZKPs which are subject to the Journey

##### sends messages on users RPS balances to Polygon

#### address on the Stakes' contract storage
> collapsed=`true`


##### to be set as part of the Journey Approval proposal execution

##### if unset, Journey call reverts

#### interface that Stakes contract calls to
> collapsed=`true`


##### function shipRewards\(uint256 zkpAmount\) external returns\(bool success\);

##### function shipShare\(address account, uint256 share\) external returns\(bool success\);

##### function shipShares\(address\[\] accounts, uint256\[\] shares\) external returns\(bool success\);

## Misc Specs
> collapsed=`true`


### At a governance proposal, the Staking contract must be capable of Governance Staking after the "Journey"
> collapsed=`true`


#### with another instance of Stakes or w/o it

### Contracts must be capable to implement the Journey w/o updating it
> collapsed=`true`


#### Just by adding new contracts and updating storage params of the deployed contracts

### The Staking must return "unstake"\`d $ZKPs even if the Stakes reverts/fails on processing the "signal"
> collapsed=`true`


#### \`try\-catch\` to be used
